{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

forall X -> tuple _unsafe_tuple(X x) asm "NOP";

tuple tup10(int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10) asm "10 TUPLE";
tuple tup15(int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10, int x11, int x12, int x13, int x14, int x15) asm "15 TUPLE";

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  ;; dumb and basic
  ;; but with pivots and neat trick
  int a = 0;
  int b = 1;
  tuple r = empty_tuple();
  if (k == 0) {
    return r;
  }
  if (n > 0) {
    int rem = n;
    if (n >= 350) { a = 6254449428820551641549772190170184190608177514674331726439961915653414425; b = 10119911756749018713965376799211044556615579094364594923736162239653346274; rem -= 350; }
    elseif (n >= 300) { a = 222232244629420445529739893461909967206666939096499764990979600; b = 359579325206583560961765665172189099052367214309267232255589801; rem -= 300; }
    elseif (n >= 250) { a = 7896325826131730509282738943634332893686268675876375; b = 12776523572924732586037033894655031898659556447352249; rem -= 250; }
    elseif (n >= 200) { a = 280571172992510140037611932413038677189525; b = 453973694165307953197296969697410619233826; rem -= 200; }
    elseif (n >= 150) { a = 9969216677189303386214405760200; b = 16130531424904581415797907386349; rem -= 150; }
    elseif (n >= 100) { a = 354224848179261915075; b = 573147844013817084101; rem -= 100; }
    elseif (n >= 50) { a = 12586269025; b = 20365011074; rem -= 50; }
    repeat (rem - 1) {
      (a, b) = (b, a + b);
    }
    if (k > 0) {
      if (k > 15) {
        int x1 = b;
        int x2 = b + a;
        int x3 = x2 + x1;
        int x4 = x3 + x2;
        int x5 = x4 + x3;
        int x6 = x5 + x4;
        int x7 = x6 + x5;
        int x8 = x7 + x6;
        int x9 = x8 + x7;
        int x10 = x9 + x8;
        int x11 = x10 + x9;
        int x12 = x11 + x10;
        int x13 = x12 + x11;
        int x14 = x13 + x12;
        int x15 = x14 + x13;
        a = x15;
        b = x14 + x15;
        k -= 15;
        r = tup15(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15);
      }
      repeat (k - 1) {
        r~tpush(b);
        (a, b) = (b, a + b);
      }
      r~tpush(b);
    }
  } else {
    if (k > 0) {
      if (k > 15) {
        int x1 = a;
        int x2 = a + b;
        int x3 = x2 + x1;
        int x4 = x3 + x2;
        int x5 = x4 + x3;
        int x6 = x5 + x4;
        int x7 = x6 + x5;
        int x8 = x7 + x6;
        int x9 = x8 + x7;
        int x10 = x9 + x8;
        int x11 = x10 + x9;
        int x12 = x11 + x10;
        int x13 = x12 + x11;
        int x14 = x13 + x12;
        int x15 = x14 + x13;
        a = x14 + x15;
        b = x15 + a;
        k -= 15;
        r = tup15(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15);
      }
      repeat (k - 1) {
        r~tpush(a);
        (a, b) = (b, a + b);
      }
      r~tpush(a);
    }
  }
  return r;
}

