{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

global int gk;

() recv_internal() {
    {-
    int a = 0;
    int b = 1;
    cell dict = new_dict();
    ;; (cell, ()) ~udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUSETB";
    int n = 1;
    repeat(369) {
        dict~udict_set_builder(9, n, begin_cell().store_uint(a, 256).store_uint(b, 256));
        (a, b, n) = (b, a + b, n + 1);
    }
    set_data(dict);
    -}
}

tuple build_fibo_seq_left(int a, int b, int k1) asm "REPEAT:<{ DUP2 ADD }> DROP gk GETGLOB TUPLEVAR";
tuple build_fibo_seq_right(int a, int b, int k1) asm "REPEAT:<{ DUP2 ADD }> gk GETGLOB TUPLEVAR NIP";

{-
tuple build_fibo_seq_left(int a, int b, int k1) asm """
  // a b k1
  REPEAT:<{
    // a b
    DUP2
    // a b a b
    ADD
    // a b a+b
  }>
  DROP
  gk GETGLOB
  TUPLEVAR
""";

tuple build_fibo_seq_right(int a, int b, int k1) asm """
  // a b k1
  REPEAT:<{
    // a b
    DUP2
    // a b a b
    ADD
    // a b a+b
  }>
  gk GETGLOB
  TUPLEVAR
  NIP
""";
-}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  ;; dumb and basic
  ;; but with pivots and neat trick
  int a = 0;
  int b = 1;
  if (k == 0) { return empty_tuple(); }
  gk = k;
  k -= 1;
  if (n > 0) {
    int rem = n;
    ;; 0    185     370
    ;;   92      277
    ;; 46  138 231  323
    if (n < 185) {
        ;; n >= 0
        if (n < 92) {
            if (n >= 46) {
                ;; n >= 46
                (a, b, rem) = (1836311903, 2971215073, rem - 46);
            }
        } else {
            ;; n >= 92
            if (n < 138) {
                ;; n >= 92
                (a, b, rem) = (7540113804746346429, 12200160415121876738, rem - 92);
            } else {
                ;; n >= 138
                (a, b, rem) = (30960598847965113057878492344, 50095301248058391139327916261, rem - 138);
            }
        }
    } else {
        ;; n >= 185
        if (n < 277) {
            if (n < 231) {
                ;; n >= 185
                (a, b, rem) = (205697230343233228174223751303346572685, 332825110087067562321196029789634457848, rem - 185);
            } else {
                ;; n >= 231
                (a, b, rem) = (844617150046923109759866426342507997914076076194, 1366619256256991435939546543402365995473880912459, rem - 231);
            }
        } else {
            ;; n >= 277
            if (n < 323) {
                ;; n >= 277
                (a, b, rem) = (3468097888158339286797581652104954628434169971646694834457, 5611500259351924431073312796924978741056961814867751431689, rem - 277);
            } else {
                ;; n >= 323
                (a, b, rem) = (14240420007076730617258541919943310440740965418798778412503676622857, 23041483585524168262220906489642018075101617466780496790573690289968, rem - 323);
            }
        }
    }
    {-
    if (n >= 350) { a = 6254449428820551641549772190170184190608177514674331726439961915653414425; b = 10119911756749018713965376799211044556615579094364594923736162239653346274; rem -= 350; }
    elseif (n >= 300) { a = 222232244629420445529739893461909967206666939096499764990979600; b = 359579325206583560961765665172189099052367214309267232255589801; rem -= 300; }
    elseif (n >= 250) { a = 7896325826131730509282738943634332893686268675876375; b = 12776523572924732586037033894655031898659556447352249; rem -= 250; }
    elseif (n >= 200) { a = 280571172992510140037611932413038677189525; b = 453973694165307953197296969697410619233826; rem -= 200; }
    elseif (n >= 150) { a = 9969216677189303386214405760200; b = 16130531424904581415797907386349; rem -= 150; }
    elseif (n >= 100) { a = 354224848179261915075; b = 573147844013817084101; rem -= 100; }
    elseif (n >= 50) { a = 12586269025; b = 20365011074; rem -= 50; }
    -}
    repeat (rem - 1) {
      (a, b) = (b, a + b);
    }
    return build_fibo_seq_right(a, b, k);
    {-
    repeat (k - 1) {
      r~tpush(b);
      (a, b) = (b, a + b);
    }
    r~tpush(b);
    -}
  } else {
    return build_fibo_seq_left(a, b, k);
    {-
    repeat (k - 1) {
      r~tpush(a);
      (a, b) = (b, a + b);
    }
    r~tpush(a);
    -}
  }
}

