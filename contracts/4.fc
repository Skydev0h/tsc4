{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

const int range = 26;

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  tuple bstk = null();
  builder b = begin_cell();
  slice s = text.begin_parse();
  int ns = (shift + range) % range;
  b = b.store_uint(s~load_uint(32), 32);
  do {
    int len = s.slice_bits() / 8;
    repeat (len) {
      int c = s~load_uint(8);
      throw_if(99, c >= 129);
      if ( (c >= "a"u) & (c <= "z"u) ) {
        c += ns;
        c += range * (c > "z"u);
      } elseif ( (c >= "A"u) & (c <= "Z"u) ) {
        c += ns;
        c += range * (c > "Z"u);
      }
      b~store_uint(c, 8);
    }
    if (s.slice_refs() != 0) {
      bstk = cons(b, bstk);
      b = begin_cell();
      s = s~load_ref().begin_parse();
    }
  } until(s.slice_empty?())
  while (bstk.null?() == false) {
    b = bstk~list_next().store_ref(b.end_cell());
  }
  return b.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return caesar_cipher_encrypt(range - shift, text);
}

